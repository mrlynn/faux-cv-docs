"use strict";(self.webpackChunkfaux_cv_docs=self.webpackChunkfaux_cv_docs||[]).push([[864],{8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var t=s(6540);const a={},i=t.createContext(a);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(i.Provider,{value:n},e.children)}},9365:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"examples","title":"Examples","description":"This guide provides practical examples of using Faux-CV in various scenarios. Each example includes both CLI and API usage.","source":"@site/docs/examples.md","sourceDirName":".","slug":"/examples","permalink":"/faux-cv-docs/docs/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/faux-cv/faux-cv/tree/main/docs/docs/examples.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Templates","permalink":"/faux-cv-docs/docs/templates"},"next":{"title":"Troubleshooting","permalink":"/faux-cv-docs/docs/troubleshooting"}}');var a=s(4848),i=s(8453);const r={sidebar_position:5},l="Examples",c={},o=[{value:"Basic Examples",id:"basic-examples",level:2},{value:"Generate a Tech Resume",id:"generate-a-tech-resume",level:3},{value:"Marketing Professional Resume",id:"marketing-professional-resume",level:3},{value:"Advanced Examples",id:"advanced-examples",level:2},{value:"Multiple Format Output",id:"multiple-format-output",level:3},{value:"Batch Generation with Custom PDF Style",id:"batch-generation-with-custom-pdf-style",level:3},{value:"Custom Template Usage",id:"custom-template-usage",level:3},{value:"Real-World Use Cases",id:"real-world-use-cases",level:2},{value:"Job Application Automation",id:"job-application-automation",level:3},{value:"Resume Database Population",id:"resume-database-population",level:3},{value:"Resume A/B Testing",id:"resume-ab-testing",level:3},{value:"Testing Examples",id:"testing-examples",level:2},{value:"Unit Testing",id:"unit-testing",level:3},{value:"Integration Testing",id:"integration-testing",level:3},{value:"See Also",id:"see-also",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"examples",children:"Examples"})}),"\n",(0,a.jsx)(n.p,{children:"This guide provides practical examples of using Faux-CV in various scenarios. Each example includes both CLI and API usage."}),"\n",(0,a.jsx)(n.h2,{id:"basic-examples",children:"Basic Examples"}),"\n",(0,a.jsx)(n.h3,{id:"generate-a-tech-resume",children:"Generate a Tech Resume"}),"\n",(0,a.jsx)(n.p,{children:"Using the CLI:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npx faux-cv -i tech -e 5\n"})}),"\n",(0,a.jsx)(n.p,{children:"Using the API:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const { generateResume } = require('faux-cv');\n\nconst resume = await generateResume({\n  industry: 'tech',\n  experienceYears: 5\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"marketing-professional-resume",children:"Marketing Professional Resume"}),"\n",(0,a.jsx)(n.p,{children:"Using the CLI:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npx faux-cv -i marketing -e 8 -g female\n"})}),"\n",(0,a.jsx)(n.p,{children:"Using the API:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const resume = await generateResume({\n  industry: 'marketing',\n  experienceYears: 8,\n  gender: 'female'\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"advanced-examples",children:"Advanced Examples"}),"\n",(0,a.jsx)(n.h3,{id:"multiple-format-output",children:"Multiple Format Output"}),"\n",(0,a.jsx)(n.p,{children:"Generate a resume in both markdown and JSON formats:"}),"\n",(0,a.jsx)(n.p,{children:"Using the CLI:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npx faux-cv -i tech -e 5 -f both -o tech-resume\n"})}),"\n",(0,a.jsx)(n.p,{children:"Using the API:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const resume = await generateResume({\n  industry: 'tech',\n  experienceYears: 5,\n  format: 'both'\n});\n\n// Save outputs\nconst fs = require('fs');\nfs.writeFileSync('resume.md', resume.markdown);\nfs.writeFileSync('resume.json', resume.json);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"batch-generation-with-custom-pdf-style",children:"Batch Generation with Custom PDF Style"}),"\n",(0,a.jsx)(n.p,{children:"Generate multiple resumes with a modern style:"}),"\n",(0,a.jsx)(n.p,{children:"Using the CLI:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'npx faux-cv -i tech -c 5 -f pdf -p modern --pdf-color "#4a90e2" -b\n'})}),"\n",(0,a.jsx)(n.p,{children:"Using the API:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const { generateBatchResumes } = require('faux-cv');\n\nconst batch = await generateBatchResumes({\n  count: 5,\n  industry: 'tech',\n  format: 'pdf',\n  pdfStyle: 'modern',\n  pdfColor: '#4a90e2',\n  combinePdf: true\n});\n\n// Save the combined PDF\nfs.writeFileSync('resumes.pdf', batch.combinedPdf);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"custom-template-usage",children:"Custom Template Usage"}),"\n",(0,a.jsx)(n.p,{children:"Using a custom template with specific fields:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// custom-template.mustache\nconst template = `\n# {{basicInfo.name}}\n{{basicInfo.title}}\n\n## Professional Summary\n{{basicInfo.summary}}\n\n## Core Skills\n{{#skills.categories}}\n{{#name}}### {{.}}{{/name}}\n{{#skills}}\n- {{.}}\n{{/skills}}\n{{/skills.categories}}\n\n## Experience Highlights\n{{#experience}}\n### {{company}}\n**{{title}}** ({{startDate}} - {{endDate}})\n{{#highlights}}\n* {{.}}\n{{/highlights}}\n{{/experience}}\n`;\n\n// Using the template\nconst resume = await generateResume({\n  template: './custom-template.mustache',\n  industry: 'tech',\n  experienceYears: 5\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"real-world-use-cases",children:"Real-World Use Cases"}),"\n",(0,a.jsx)(n.h3,{id:"job-application-automation",children:"Job Application Automation"}),"\n",(0,a.jsx)(n.p,{children:"Generate multiple resumes tailored for different job postings:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const jobs = [\n  { industry: 'tech', role: 'frontend' },\n  { industry: 'tech', role: 'backend' },\n  { industry: 'tech', role: 'fullstack' }\n];\n\nasync function generateJobApplications() {\n  for (const job of jobs) {\n    const resume = await generateResume({\n      industry: job.industry,\n      experienceYears: 5,\n      format: 'pdf',\n      pdfStyle: 'professional',\n      // Additional customization based on role\n      template: `./templates/${job.role}.mustache`\n    });\n    \n    fs.writeFileSync(`resume-${job.role}.pdf`, resume.pdf);\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"resume-database-population",children:"Resume Database Population"}),"\n",(0,a.jsx)(n.p,{children:"Create a sample resume database for testing:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"async function populateResumeDatabase(count = 100) {\n  const industries = ['tech', 'marketing', 'finance', 'healthcare'];\n  const batch = await generateBatchResumes({\n    count,\n    format: 'json',\n    // Randomly select industry for each resume\n    industry: () => industries[Math.floor(Math.random() * industries.length)],\n    experienceYears: () => Math.floor(Math.random() * 20) + 1\n  });\n  \n  // Save to database\n  for (const resume of batch.resumes) {\n    await db.resumes.insert(resume.json);\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"resume-ab-testing",children:"Resume A/B Testing"}),"\n",(0,a.jsx)(n.p,{children:"Generate different versions of a resume for testing:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"async function generateResumeVariants() {\n  const styles = ['default', 'modern', 'minimal', 'professional'];\n  const variants = await Promise.all(styles.map(style => \n    generateResume({\n      industry: 'tech',\n      experienceYears: 5,\n      format: 'pdf',\n      pdfStyle: style,\n      seed: 12345 // Use same seed for consistent content\n    })\n  ));\n  \n  // Save variants\n  variants.forEach((variant, index) => {\n    fs.writeFileSync(`resume-variant-${styles[index]}.pdf`, variant.pdf);\n  });\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"testing-examples",children:"Testing Examples"}),"\n",(0,a.jsx)(n.h3,{id:"unit-testing",children:"Unit Testing"}),"\n",(0,a.jsx)(n.p,{children:"Example of testing resume generation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"describe('Resume Generation', () => {\n  it('should generate a valid tech resume', async () => {\n    const resume = await generateResume({\n      industry: 'tech',\n      experienceYears: 5\n    });\n    \n    expect(resume.json.basicInfo).toBeDefined();\n    expect(resume.json.experience.length).toBeGreaterThan(0);\n    expect(resume.json.skills.categories).toBeDefined();\n  });\n  \n  it('should handle custom templates', async () => {\n    const resume = await generateResume({\n      template: './test/fixtures/test-template.mustache'\n    });\n    \n    expect(resume.markdown).toMatch(/# .+/); // Should have a title\n    expect(resume.markdown).toMatch(/## Experience/); // Should have experience section\n  });\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,a.jsx)(n.p,{children:"Example of testing the complete workflow:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"describe('Resume Workflow', () => {\n  it('should generate and save multiple formats', async () => {\n    const resume = await generateResume({\n      industry: 'tech',\n      format: 'both'\n    });\n    \n    // Test markdown output\n    expect(resume.markdown).toBeDefined();\n    expect(typeof resume.markdown).toBe('string');\n    \n    // Test JSON output\n    expect(resume.json).toBeDefined();\n    expect(resume.json.basicInfo.name).toBeDefined();\n    \n    // Save files\n    await fs.promises.writeFile('test-resume.md', resume.markdown);\n    await fs.promises.writeFile('test-resume.json', JSON.stringify(resume.json, null, 2));\n    \n    // Verify files\n    const savedMarkdown = await fs.promises.readFile('test-resume.md', 'utf8');\n    expect(savedMarkdown).toBe(resume.markdown);\n  });\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"./cli",children:"CLI Reference"})," - Complete CLI documentation"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"./api",children:"API Reference"})," - Detailed API documentation"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"./templates",children:"Templates"})," - Template customization guide"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);